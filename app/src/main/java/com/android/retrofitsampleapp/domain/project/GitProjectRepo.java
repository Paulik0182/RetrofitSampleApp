package com.android.retrofitsampleapp.domain.project;
/**
 * Глобально мы делаем рефакторинг.
 * Рефакторинг — это переработка исходного кода программы, чтобы он стал более простым и понятным.
 * Рефакторинг не меняет поведение программы, не исправляет ошибки и не добавляет новую функциональность.
 * Он делает код более понятным и удобочитаемым.
 * <p>
 * Рефакторинг — не оптимизация, хотя и может быть с нею связан. Часто его проводят одновременно с оптимизацией,
 * поэтому понятия кажутся синонимами. Но у этих процессов разные цели.
 * Цель оптимизации — улучшение производительности программы, а рефакторинга — улучшение понятности кода.
 * После оптимизации исходный код может стать сложнее для понимания.
 */

import java.util.List;

/**
 * Все обарачиваем в репозеторий, то-есть скрываем существование retrofit. Подменяем retrofit на Room
 * (на фейковую реализацию)
 * Кэшируем список пользователей.
 */

public interface GitProjectRepo {
    //    CRUD

    // расширяем репозиторий.
    void saveProject(List<GitProjectEntity> projectEntities);

    // для реализации необходимо передать Callback, через List реализовать мы не можемю.
    // Для реализации необходим асинхронный подход передать Callback
    void getProject(Callback callback);

    //интерфейс ничего не знающий не retrofit не Room который умеет отдавать пользователей
    interface Callback {
        //метод на вход которого всегда будет приходить список пользователя
        void onSuccess(List<GitProjectEntity> projectEntities);

        //на вход ошибка
        void onError(Throwable throwable);

    }
}
